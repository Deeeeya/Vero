/* Authentication context is a mechanism that manages and provides
details about a users authentication state, acting as a control center
for all components to be aware about the users authentication */
/* If the state changes in auth, whatever the logic is,
 it will do it without refreshing or doing anything
 (not passing it through props) */

 import {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { authService } from "../services/authService";
import type { User } from "../types/auth";

// Define what out context will provide
interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
}

// Create the context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Provider component that wraps your app
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Check if user is logged in when app starts
  useEffect(() => {
    const checkAuth = () => {
      if (authService.isAuthenticated()) {
        // User has token, assume they're logged in
        setUser({ id: "", email: "", metadata: {} }); // Placeholder user
      }
      setIsLoading(false); // We're done checking
    };
    checkAuth(); // Actually run that funtion
  }, []); // [] means "only run this once when component first loads"

  // Login function
  const login = async (email: string, password: string) => {
    const response = await authService.login(email, password);
    setUser(response.user);
  };

  // Logout function
  const logout = async () => {
    await authService.logout();
    setUser(null);
  };

  // Create value object with neccessary functions

  const value = {
    user,
    isLoading,
    isAuthenticated: !!user,
    login,
    logout,
  };
  // return the AuthContext element with value
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to use auth context


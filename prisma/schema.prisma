generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  hashPassword       String
  metadata           Json
  emailVerified      Boolean              @default(false)
  verifications      VerificationCode[]
  verificationTokens VerificationTokens[]
  projects           Project[]

  @@index(fields: [email])
  @@map("users")
}

model Project {
  id            String        @id @default(uuid())
  name          String
  description   String?
  platform      Platform      @default(all)
  accessTTL     Int           @default(900)
  refreshTTL    Int           @default(43200)
  singleSession Boolean       @default(false)
  users         ProjectUser[]
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])

  @@map("projects")
}

model ProjectUser {
  id            String             @id @default(uuid())
  email         String             @unique
  hashPassword  String
  metadata      Json
  enabled       Boolean            @default(true)
  sessions      UserSession[]
  verifications VerificationCode[]
  project       Project?           @relation(fields: [projectId], references: [id])
  projectId     String?
  magicLinks    MagicLink[]

  @@index(fields: [email])
  @@map("projectUsers")
}

enum TokenType {
  email_verification
  password_reset
}

model VerificationTokens {
  id        String    @id @default(uuid())
  userId    String
  email     String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  used      Boolean   @default(false)
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])

  @@map("VerificationTokens")
}

model MagicLink {
  id        String      @id @default(uuid())
  token     String
  user      ProjectUser @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  usedAt    DateTime
  isUsed    Boolean
  isExpired Boolean
  ipUsed    String?

  @@index(fields: [token])
  @@map("magicLinks")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  metadata  Json
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("sessions")
}

model UserSession {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  revokedAt         DateTime?
  accessExpiration  DateTime
  refreshExpiration DateTime
  userId            String
  accessToken       String
  refreshToken      String
  ipAddress         String?
  deviceInfo        Json?
  user              ProjectUser @relation(fields: [userId], references: [id])

  @@map("userSessions")
}

model VerificationCode {
  id            String       @id @default(uuid())
  code          String
  createdAt     DateTime     @default(now())
  expiresAt     DateTime
  verifiedAt    DateTime
  isUsed        Boolean      @default(false)
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  projectUser   ProjectUser? @relation(fields: [projectUserId], references: [id])
  projectUserId String?

  @@map("verificationCodes")
}

enum Platform {
  web
  mobile
  desktop
  all
}
